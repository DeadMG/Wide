type base {
    dynamic g() { return false; }
}
type Derived : base {
    ptr : bool.pointer;
    g() { return true; }
    type(arg : bool.lvalue) : ptr := &arg {}
    type(other : Derived.rvalue) : ptr := other.ptr { other.ptr = null; }
    type(other : Derived.lvalue) : ptr := other.ptr {}
    ~type() { if (ptr) *ptr = true; }
}
Main() {
    ret := false;
    ret2 := false;
    try {
        throw Derived(ret);
    } catch(var : base.lvalue) {
        ret2 = var.g();
    }
    return ret & ret2;
}