module Standard {
    module Text {
        module Detail {
            StringBase(e) {
                return type {
                    begin := e.codeunit->pointer;
                    end := e.codeunit->pointer;
                    capacity := e.codeunit->pointer;
                
                    type(this->lvalue other)
                        : begin(Standard.Memory.Malloc(other.Capacity()))
                        , end(begin)
                        , capacity(begin + other.Capacity()) 
                    {
                        Range.IteratorRange(other.begin, other.end) | Copy(function(val)[&] { *end++ = val; });
                    }
                
                    type(this->rvalue other)
                        : begin(other.begin), end(other.end), capacity(other.capacity)
                    {
                        other.begin = null;
                        other.end = null;
                        other.capacity = null;
                    }
                
                    ~type() {
                        Standard.Memory.Free(begin, Capacity());
                    }
                };
            }
        }
        String(e) {
            return Detail.StringBsae(e);
        }
        String(Encoding.System enc) {
            return type : Detail.StringBase(enc) {
                using Detail.StringBase(enc);

                type(Standard.Text.LiteralString, enc.codepoint->pointer what, uint64 size)
                   : begin(null), end(null), capacity(null)
                {
                    // [begin, end)
                    if (size == 0) return;
                    begin = end = Standard.Memory.Malloc(size);
                    Range.IteratorRange(what, what + size) | Copy(function(val)[&] { *end++ = val; });
                    capacity = end;
                }
            };
        }
        String() {
            return String(Encoding.System());
        }
    }
}