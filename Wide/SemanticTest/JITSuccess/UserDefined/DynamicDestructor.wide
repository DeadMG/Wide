type base {
    ptr : int64.pointer;
    type(arg : int64.lvalue) : ptr := &arg {}
    dynamic ~type() { *ptr += 1; }
}
type derived : base {
    val : bool.pointer;
    ~type() {
        *val = true;
    }
    type(arg : bool.lvalue, arg2 : int64.lvalue) : base := arg2 : val := &arg {}
}
f(arg : base.lvalue) {
    arg.~type();
}
Main() {
    destructs := 0;
    ret1 := false;
    ret2 := false;
    {
        val := derived(ret1, destructs);
        f(val);
        derived.constructors(val, ret2, destructs);
    }
    return ret1 & ret2 & destructs == 2;
}